/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OregonTrail;

import java.util.ArrayList;
import java.util.*;
import javax.swing.JOptionPane;
import java.lang.Math;

/**
 *
 * @author bduse
 */
public class PlayerUI extends javax.swing.JFrame {

    /**
     * Creates new form PlayerUI
     */
    private ArrayList<Item> items;
    private boolean askingForPace;
    private int pace;
    private boolean event;
    private int eventNumber;
    private boolean hasLost;
    private int distance;
    private boolean promptEvent;
    private boolean promptPace;
    /**
     * Creates new form OregonTrailExperience
     */
    public PlayerUI()
    {
        
    }
    public PlayerUI(ArrayList<Item> items) {
        initComponents();
        inputTextField.requestFocus();
        displayTextArea.append("> Welcome to the Oregon Trail!\n> Press ENTER throughout the game to proceed.\n");
        displayTextArea.append("> You can also use the !distance command to see how far you have left to go.\n");
        displayTextArea.append("> At any point in the game you can type !rules to see a \nfull list of rules. You can also look at your inventory by typing !inventory.\n");
        displayTextArea.setEditable(false);
        this.items = new ArrayList<Item>();
        this.items = items;
        for(int i = 0; i < this.items.size(); i++)
        {
            System.out.println(this.items.get(i).toStringAfterCarry());
        }
        this.askingForPace = false;
        boolean[] eventHappened = new boolean[3];
        for(int i = 0; i < eventHappened.length; i++)
        {
            eventHappened[i] = false;
        }
        event = false;
        hasLost = false;
        promptEvent = false;
        promptPace = true;
        distance = 500;
        {
            int totalWeight = 0;
            for(int i = 0; i < items.size(); i++)
            {
                for(int j = 0; j < items.get(i).getQuantity(); j++)
                {
                    totalWeight += items.get(i).getWeight();
                }
            }
            if(totalWeight > 100)
            {
                hasLost = true;
                displayTextArea.append("> Your wagon is too heavy! You can't move!");
            }
        }
    }

    
    public void displayRules()
    {
        displayTextArea.append("> Oregon Trail is a survival role-playing game where you will make decisions to survive. \n  You will set the pace for how fast you navigate through Oregon Trail!\n");
        displayTextArea.append("  The items you have carried with you will  help you conquer obstacles along the way.\n  Here is a list of scenarios you might see:\n");
        displayTextArea.append("  1. Encountering a river\n  2. Getting ill\n  3. A thief\n  Good Luck!\n");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        inputTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 400));

        jLabel1.setBackground(java.awt.Color.white);
        jLabel1.setFont(new java.awt.Font("Brush Script MT", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("The Oregon Trail");

        displayTextArea.setBackground(java.awt.Color.black);
        displayTextArea.setColumns(20);
        displayTextArea.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        displayTextArea.setForeground(java.awt.Color.green);
        displayTextArea.setRows(5);
        jScrollPane1.setViewportView(displayTextArea);

        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Enter Command ->");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        if(hasLost)
        {
            int inputDialog = JOptionPane.showConfirmDialog(this,"You have not surivived Oregon Trail! Would you like to play again?");
            if(inputDialog == JOptionPane.YES_OPTION)
            {
                this.dispose();
                OregonTrail oregonTrail = new OregonTrail();
                oregonTrail.setVisible(true);
            }
            else
            {
                System.exit(0);
            }
        }       
        String input = inputTextField.getText();
        if(input.length() > 0)
        {
            displayTextArea.append("> " + input + "\n");
        }
        inputTextField.setText(""); 
        if(input.equals("!rules"))
        {
            displayRules();
        }
        else if(input.equals("!inventory"))
        {
            displayTextArea.append("> Inventory:\n\n");
            displayTextArea.append("  Weight:   Item:\n");
            for(int i = 0; i < this.items.size(); i++)
            {
                displayTextArea.append(this.items.get(i).toStringAfterCarry());
            }       
            displayTextArea.append("\n");
        }
        else if(input.equals("!distance"))
        {
            displayTextArea.append("> You still have " + distance + " more miles to go!\n");
        }
        else
        {
            if(promptPace)
            {
                displayTextArea.append("> What pace would you like to set in miles per day for the next week: 10, 15, or 20?\n");    
                askingForPace = true;
                promptPace = false;
            }
            else if(askingForPace)
            {
                pace = Integer.parseInt(input);
                displayTextArea.append("> You set your walking pace to " + pace + " miles per day for one week!\n");
                promptEvent = true;
                askingForPace = false;
                distance -= pace*7;
                int findFood = -1;
                for(int i = 0; i < items.size(); i++)
                {
                    if(items.get(i).getName().toLowerCase().equals("food"))
                    {
                        findFood = i;
                    }
                }
                if(findFood == -1)
                {
                    displayTextArea.append("You forgot the food!");
                    hasLost = true;
                }
                else
                {
                    items.get(findFood).setWeight(items.get(findFood).getWeight() - pace / 2);
                    if(items.get(findFood).getWeight() <= 0)
                    {
                        displayTextArea.append("You ran out of food!");
                    }
                }
            }
            else if(promptEvent)
            {
                Random rand = new Random();
                eventNumber = Math.abs(rand.nextInt()) % 4;
                switch(eventNumber)
                {
                    case 0:
                    displayTextArea.append("> You have encountered a river! Would you like to cross (cross) or take a detour (detour)?\n");         
                    break;
                    case 1:
                    displayTextArea.append("> A thief has appeared!\n");               
                    break;
                    case 2:
                    displayTextArea.append("> You have become ill! Hopefully you have medicine...\n");
                    break;
                    case 3:
                    displayTextArea.append("> It looks like you have gotten through this week with no problems!\n");
                    askingForPace = true;
                    break;
                }
                promptEvent = false;
                event = true;
                if(eventNumber == 3)
                {
                    event = false;
                    promptPace = true;
                }
            }
            else if(event)
            {   
                event = false;
                promptPace = true;
                switch(eventNumber)
                {
                    case 0:
                    if(input.toLowerCase().equals("cross"))
                    {
                        int totalWeight = 0;
                        for(int i = 0; i < items.size(); i++)
                        {
                            for(int j = 0; j < items.get(i).getQuantity(); j++)
                            {
                                totalWeight += items.get(i).getWeight();
                            }
                        }
                        if(totalWeight > 75)
                        {
                            displayTextArea.append("> You have tried to cross the river and your wagon is too heavy! It's now stuck!\n");
                            hasLost = true;
                        }
                        else
                        {
                            displayTextArea.append("> You have successfully crossed the river.\n");
                            promptPace = true;                            
                        }
                    }
                    else if(input.toLowerCase().equals("detour"))
                    {
                        displayTextArea.append("> You have decided to take a detour. That will cost you 25.0 lbs of food!\n");
                        int findFood = 0;
                        for(int i = 0; i < items.size(); i++)
                        {
                            if(items.get(i).getName().toLowerCase().equals("food"))
                            {
                                findFood = i;
                            }
                        }
                        items.get(findFood).setWeight(items.get(findFood).getWeight() - 25);
                        if(items.get(findFood).getWeight() < 0)
                        {
                            hasLost = true;
                            displayTextArea.append("> Oh no, you have ran out of food by taking a detour!\n");                     
                        }
                        else
                        {
                            displayTextArea.append("> You have made the detour and still have food!\n");
                            promptPace = true;
                        }
                    }
                    else
                    {
                        promptPace = false;
                        event = true;                        
                        displayTextArea.append("> Command not recognized... please type 'cross' or 'detour'.\n");
                    }
                    break;
                    case 1:
                    Random rand = new Random();
                    int randomItem = Math.abs(rand.nextInt()) % items.size();
                    System.out.println(randomItem);
                    if(items.get(randomItem).isFood())
                    {
                        int randomAmount = Math.abs(rand.nextInt() % 16) + 10;
                        if(items.get(randomItem).getWeight() - randomAmount < 0)
                        {
                            items.remove(randomItem);
                            displayTextArea.append("> Oh no, the thief has taken all of your " + items.get(randomItem).getName().toLowerCase() + "!\n");                           
                            promptPace = true;                      
                        }
                        else
                        {
                            items.get(randomItem).setWeight(items.get(randomItem).getWeight() - randomAmount);
                            displayTextArea.append("> Oh no, the thief has taken " + randomAmount + " lbs of your " + items.get(randomItem).getName().toLowerCase() + "!\n");
                            promptPace = true;
                        }
                    }
                    else
                    {
                        displayTextArea.append("> Oh no, the thief has taken your " + items.get(randomItem).getName().toLowerCase() + "!\n");
                        promptPace = true;
                        items.remove(randomItem);
                    }                       
                    break;
                    case 2:
                    {
                        int findMedicine = -1;
                        for(int i = 0; i < items.size(); i++)
                        {
                            if(items.get(i).getName().toLowerCase().equals("medicine"))
                            {
                                findMedicine = i;
                            }
                        }
                        if(findMedicine == -1)
                        {
                            hasLost = true;
                            displayTextArea.append("> Oh no, you have no medicine!\n");
                        }
                        else
                        {
                            displayTextArea.append("> You have been healed by your medicine!\n");
                            items.remove(findMedicine);
                        }
                    }
                }
                
            }                   
            else
            {
                displayTextArea.append("> Unknown input. Please try again!\n");
            }
        }
        if(hasLost)
        {
            int inputDialog = JOptionPane.showConfirmDialog(this,"You have not surivived Oregon Trail! Would you like to play again?");
            if(inputDialog == JOptionPane.YES_OPTION)
            {
                this.dispose();
                OregonTrail oregonTrail = new OregonTrail();
                oregonTrail.setVisible(true);
            }
            else
            {
                System.exit(0);
            }
        }
        if(distance <= 0)
        {
            {
                int inputDialog = JOptionPane.showConfirmDialog(this,"You have completed the Oregon Trail! Would you like to play again?");
                if(inputDialog == JOptionPane.YES_OPTION)
                {
                    this.dispose();
                    OregonTrail oregonTrail = new OregonTrail();
                    oregonTrail.setVisible(true);
                }
                else
                {
                    System.exit(0);
                }
            }            
        }
    }//GEN-LAST:event_inputTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
